#!/usr/bin/env perl

# $Id: script_must_be_unique_runner 17413 2013-08-22 15:33:32Z mg8 $
# Created By: ajb
# Last Maintained By: $Author: mg8 $
# Created On: 2009-09-24
# Last Changed On: $Date: 2013-08-22 16:33:32 +0100 (Thu, 22 Aug 2013) $
# $HeadURL: svn+ssh://svn.internal.sanger.ac.uk/repos/svn/new-pipeline-dev/npg-pipeline/trunk/bin/script_must_be_unique_runner $

use strict;
use warnings;
use FindBin qw($Bin);
use lib ( -d "$Bin/../lib/perl5" ? "$Bin/../lib/perl5" : "$Bin/../lib" );
use Carp;
use Readonly;
use Getopt::Long;

Readonly::Scalar our $VERSION => do { my ($r) = q$LastChangedRevision: 17413 $ =~ /(\d+)/mxs; $r; };

my $opts = {};
GetOptions($opts, qw{job_name=s own_job_name=s});

if (!$opts->{job_name}) {
  croak 'Usage script_must_be_unique_runner -job_name=<part of job name which determines the script that is running>  -own_job_name=<unique job name identifying this job>';
}

my $output = q[];
if ($opts->{own_job_name}) {
  $output = `bjobs -u prod_users -w -r | grep $opts->{job_name} | grep -v $opts->{own_job_name}`;
} else {
  # Attention! This will not prevent members of a job array from runnign concurrently.
  my $job_index_var = $ENV{'LSB_JOBID'};
  $output = `bjobs -u prod_users -w -r | grep $opts->{job_name} | grep -v $job_index_var`;
}
if ($output) {
  exit 1;
}

0;

__END__

=head1 NAME

script_must_be_unique_runner

=head1 VERSION

$LastChangedRevision: 17413 $

=head1 SYNOPSIS

script_must_be_unique_runner -job_name=<part of job name which determines the script that is running>  -own_job_name=<unique job name identifying this job>

=head1 DESCRIPTION

If the script on the farm cannot run at the same time as another script of the same name, then this can be used as
a pre_exec_command with the option of the part of the job name which describes the script running.

i.e.

  bsub -J 'a_script_that_i_like_to_run_20090924-145409' -E 'script_must_be_unique_runner -job_name=a_script_that_i_like_to_run -own_job_name=a_script_that_i_like_to_run_20090924-145409' 'a_script_that_i_like_to_run -id_run=1234'
  bsub -J 'a_script_that_i_like_to_run_20090924-145410' -E 'script_must_be_unique_runner -job_name=a_script_that_i_like_to_run -own_job_name=a_script_that_i_like_to_run_20090924-145410' 'a_script_that_i_like_to_run -id_run=2345'

Once one of these has started to run, the other won't until it has finished. This can only work as long as part of
the job name whenever these are launched are the same, but unique enough only to launching this script
(e.g. The scriptname itself ought to be good)

=head1 USAGE

See DESCRIPTION

=head1 REQUIRED ARGUMENTS

job_name
own_job_name

=head1 OPTIONS

No additional optional arguments

=head1 EXIT STATUS

1 if another copy is running, 0 if not.
This satisfies the way that LSF determines if it is OK to proceed with the job in hand, or needs to put it back to pending

=head1 SUBROUTINES/METHODS

=head1 DIAGNOSTICS

=head1 CONFIGURATION

=head1 DEPENDENCIES

=over

=item strict

=item warnings

=item Carp

=item English -no_match_vars

=item Readonly

=item Getopt::Long

=item lib

=item FindBin

=back

=head1 INCOMPATIBILITIES

=head1 BUGS AND LIMITATIONS

=head1 AUTHOR

$Author: mg8 $

=head1 LICENSE AND COPYRIGHT

Copyright (C) 2010 GRL, by Andy Brown (ajb@sanger.ac.uk)

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
