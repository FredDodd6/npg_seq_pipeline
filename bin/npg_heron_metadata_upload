#!/usr/bin/env perl

use strict;
use warnings;
use FindBin qw($Bin);
use lib ( -d "$Bin/../lib/perl5" ? "$Bin/../lib/perl5" : "$Bin/../lib" );

use Carp;
use Data::Dump qw(pp);
use Getopt::Long;
use List::MoreUtils qw[uniq];
use Log::Log4perl qw(:levels);
use URI;
use Pod::Usage;
use Try::Tiny;

use WTSI::DNAP::Warehouse::Schema;
use npg_tracking::Schema;
use npg_pipeline::product::heron::upload::library;
use npg_pipeline::product::heron::upload::run;
use npg_pipeline::product::heron::upload::metadata_client;

our $VERSION = '0';

my $artic_primers_version;
my $debug;
my $dry_run;
my @id_run;
my $instrument_make;
my $instrument_model;

my $library_selection;
my $library_source;
my $library_strategy;

my $sequencing_kit;
my $sequencing_layout_config;
my $sequencing_protocol;

my $token;
my $url;
my $username;
my $verbose;

GetOptions('artic_primers_version|' .
               'artic-primers-version=s'         => \$artic_primers_version,
           'debug'                               => \$debug,
           'dry_run|dry-run'                     => \$dry_run,
           'help'                    => sub {
             pod2usage(-verbose => 2, -exitval => 0);
           },
           'id_run|id-run=i'                     => \@id_run,
           'instrument_make|instrument-make=s'   => \$instrument_make,
           'instrument_model|instrument-model=s' => \$instrument_model,
           'sequencing_kit|sequencing-kit'       => \$sequencing_kit,
           'sequencing_layout_config|' .
               'sequencing-layout-config'        => \$sequencing_layout_config,
           'sequencing_protocol|'  .
               'sequencing-protocol'             => \$sequencing_protocol,
           'token=s'                             => \$token,
           'url=s'                               => \$url,
           'username=s'                          => \$username,
           'verbose'                             => \$verbose);

my $level = $debug ? $DEBUG : $verbose ? $INFO : $WARN;
Log::Log4perl->easy_init({layout => '%d %-5p %c - %m%n',
                          level  => $level,
                          utf8   => 1});

my $log = Log::Log4perl->get_logger('main');

if (not @id_run) {
  pod2usage(-msg => 'At least one --id-run argument is required',  -exitval => 2);
}
if (not $url) {
  pod2usage(-msg => 'A --url argument is required',  -exitval => 2);
}
if (not $username) {
  pod2usage(-msg => 'A --username argument is required',  -exitval => 2);
}
if (not $token) {
  pod2usage(-msg => 'A --token argument is required',  -exitval => 2);
}

if (not defined $artic_primers_version) {
  pod2usage(-msg => 'A --artic-primers-version argument is required',  -exitval => 2);
}

if ($instrument_make) {
  $log->warn("Overriding default instrument make with '$instrument_make'");
}
if ($instrument_model) {
  $log->warn("Overriding default instrument model with '$instrument_model'");
}

if ($sequencing_kit) {
  $log->warn("Overriding default sequencing kit with '$sequencing_kit'");
}
if ($sequencing_layout_config) {
  $log->warn("Overriding default sequencing layout config with '$sequencing_layout_config'");
}
if ($sequencing_protocol) {
  $log->warn("Overriding default sequencing protocol with '$sequencing_protocol'");
}

my $warehouse_db = WTSI::DNAP::Warehouse::Schema->connect();
my $tracking_db = npg_tracking::Schema->connect();

my $client = npg_pipeline::product::heron::upload::metadata_client->new
    (api_uri   => URI->new($url),
     token     => $token,
     username  => $username);

my $num_runs = scalar @id_run;
my $num_errors = 0;
foreach my $id_run (@id_run) {
  try {
    # Query the tracking database to get the run. This provides two items of
    # metadata; the run folder name to use as a surrogate for "run_name" and
    # the instrument model.
    my $tracking_run = $tracking_db->resultset('Run')->find({id_run => $id_run});
    if (not defined $tracking_run) {
      croak "Failed to find run with id_run $id_run\n";
    }

    # Query ML warehouse for pool identifier to use as a surrogate for
    # "library_name".Tag zero reads are those not assigned when deplexing.
    my $rs = $warehouse_db->resultset('IseqProductMetric')->search
        ({'me.id_run'    => $id_run,
          'me.tag_index' => {'>' => 0}}, # Ignore tag zero
         {prefetch => 'iseq_flowcell'});

    # flowcell may be undef
    my @flowcells = grep { defined } map { $_->iseq_flowcell } $rs->all;

    $library_selection = 'PCR';
    $library_source    = 'VIRAL_RNA';
    $library_strategy  = 'AMPLICON';

    $sequencing_kit           ||= 'NEB Ultra II';
    $sequencing_protocol      ||= 'LIGATION';
    $sequencing_layout_config ||= 'PAIRED';

    $instrument_make  ||= 'ILLUMINA';
    $instrument_model ||= $tracking_run->instrument->instrument_format->model;

    my $run_name = $tracking_run->folder_name;

    my %library_sample_ids;
    foreach my $flowcell (@flowcells) {
      my $library_name = $flowcell->id_pool_lims; # Pool ID maps to library name
      $library_sample_ids{$library_name} ||= [];
      push @{$library_sample_ids{$library_name}}, $flowcell->sample->supplier_name;
    }

    foreach my $library_name (sort keys %library_sample_ids) {
      my @sample_ids = uniq @{$library_sample_ids{$library_name}};
      $log->info(sprintf q[Found %d samples in run %d, library: %s],
                         scalar @sample_ids, $id_run, $library_name);

      my $library = npg_pipeline::product::heron::upload::library->new
          (name                     => $library_name,
           selection                => $library_selection,
           source                   => $library_source,
           strategy                 => $library_strategy,
           artic_primers_version    => $artic_primers_version,
           sequencing_kit           => $sequencing_kit,
           sequencing_layout_config => $sequencing_layout_config,
           sequencing_protocol      => $sequencing_protocol);

      my $run = npg_pipeline::product::heron::upload::run->new
          (name             => $run_name,
           instrument_make  => $instrument_make,
           instrument_model => $instrument_model);

      if ($dry_run) {
        $log->info(sprintf q[DRY: %s], $run->str);
        $log->info(sprintf q[DRY: %s], $library->str);
      }
      else {
        $client->send_library_metadata($library, @sample_ids);
        $client->send_run_metadata($library, $run);
      }
    }
  } catch {
    $log->error($_);
    $num_errors++;
  };
}

my $msg = sprintf q[Processed %d runs with %d errors], $num_runs, $num_errors;
if ($num_errors == 0) {
  $log->info($msg)
}
else {
  $log->logcroak($msg);
}

sub _ensure_unique_value {
  my ($name, $id_run, @values) = @_;

   if (not @values) {
      croak sprintf q[No %s found for run_id %d], $name, $id_run;
    }

    my $num_values = scalar @values;
    if ($num_values > 1) {
      croak sprintf q[Expected 1 %s in tracking for run_id %d, ] .
                    q[but found %d: %s], $name, $id_run, $num_values, pp(\@values);
    }

    return $values[0];
}

1;

__END__

=head1 NAME

npg_heron_metadata_upload

=head1 SYNOPSIS

npg_heron_metadata_upload --id-run <id_run> [--id-run <id_run> ...]
  --artic-primers-version <version>
  --url <upload base URL>
  --username <API user name> --token <API access token>
  [--sequencing-kit <sequencing kit override>]
  [--sequencing-protocol <sequencing protocol override>]
  [--sequencing-layout-config <sequencing layout config override>]
  [--instrument-make <instrument override>]
  [--instrument-model <instrument model override>]
  [--library-name <library name override>]
  [--dry-run] [--debug] [--verbose]

 Options:
   --artic-primers-version    ARTIC primers version (e.g. 2, 3). Required.

   --debug                    Enable debug level logging. Optional, defaults
                              to false.
   --dry-run
   --dry_run                   Enable dry run. Optional, defaults to false.
   --help                      Display help.

   --id-run
   --id_run                    NPG tracking Illumina run ID. May be used
                               more than once, to upload multiple runs.

   --instrument-make
   --instrument_make           Override the instrument make for all runs.
                               Optional.
   --instrument-model
   --instrument_model          Override the instrument model for all runs.
                               Optional.

   --sequencing_kit
   --sequencing-kit            Override the sequencing kit for all runs.
                               Optional, defaults to 'NEB Ultra II'.
   --sequencing_layout_config
   --sequencing-layout-config  Override the sequencing layout config for
                               all runs. Optional, defaults to 'PAIRED'.
   --sequencing_protocol
   --sequencing-protocol       Override the sequencing protocol for all runs.
                               Optional, defaults to 'LIGATION'.

   --token                     The API access token. Required.
   --url                       The API base URL e.g.
                                 https://majora.covid19.climb.ac.uk/.
                               Required.
   --username                  The API user name. Required.

   --verbose                   Print messages while processing. Optional,
                               defaults to false.

=head1 DESCRIPTION

This script uploads run metadata for Illumina runs to CLIMB. See
https://docs.covid19.climb.ac.uk/

The minimum information you need to use this script is an API account
(user name and access token), plus one or more NPG Illumina run IDs.

The script requires access to both the tracking database (for run
information) and the ML warehouse (for library/pool information).

While it is possible to use CLI options to set instrument make and model
and library name, this is strongly discouraged for consistency of
tracking.

=head1 USAGE

=head1 OPTIONS

=head1 REQUIRED ARGUMENTS

=head1 DIAGNOSTICS

=head1 EXIT STATUS

=head1 CONFIGURATION

=head1 INCOMPATIBILITIES

=head1 BUGS AND LIMITATIONS

=head1 DEPENDENCIES

=head1 AUTHOR

Keith James <kdj@sanger.ac.uk>

=head1 LICENSE AND COPYRIGHT

Copyright (C) 2020, Genome Research Limited. All Rights Reserved.

This program is free software: you can redistribute it and/or modify
it under the terms of the Perl Artistic License or the GNU General
Public License as published by the Free Software Foundation, either
version 3 of the License, or (at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

=cut
